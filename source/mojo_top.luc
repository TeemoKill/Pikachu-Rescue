module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    input user_buttons[6],
    input solve_button,
    input start_button,
    //output user_led[8],
    output array_seg[7],
    output array_sel[6],
    output data_seg[7],
    output data_sel[4],
    output led[8],
    output array_led[6][3],
    output user_solvable[3]
    // output beep
  ) {
  
  const ONESECOND = 50000000;
  const STEPS = 50;
  
  alu16 alu;
  
  sig rst;                  // reset signal
  sig game_rst;
  sig eliminateSig;
  sig eliminatePosition[4];
  
  sig shiwei[4];
  sig gewei[4];
  
  problems problem_set;
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    button solve_button_cond;
    button start_button_cond;
    
    button button0;
    button button1;
    button button2;
    button button3;
    button button4;
    button button5;
    
    gameSelf game(.rst(game_rst));
    
    .rst(rst) {
    
      fsm state(#INIT(INIT)) = {INIT, PREPARE, START1, START2, START3, START4, SOLVE, CHECK, NEXTPROBLEM, WIN, LOSE, END};
      
      
    
      dff slow_clk[32];
      
      // beeper twitter(#TIME(200));
      
      multi_seven_segment numbers;
      multi_seven_segment data_segments(#DIGITS(4));
      
      multi_led array_led_controller;
      
      dff count_down[$clog2(STEPS)];
      dff one_second[$clog2(ONESECOND)];
      
      dff problem[2][5];
      
      dff start_button_dff;
      dff solve_button_dff;
      
      dff first_ball_solvable;
      dff second_ball_solvable;
      
      dff problem_solvable;
      
      dff problem_counter[$clog2(10)];
      // pwm rgb1;
      // pwm rgb2;
      // pwm rgb3;
    }
  }
  
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    led = 8b0;
    led[5:0] = user_buttons;
    
    alu.a = 0;
    alu.b = 0;
    alu.alufn = 0;
    
    game.solve1 = 0;
    game.solve0 = 0;
    game_rst = 0 | rst;
    
    problem_set.problem_count = problem_counter.q;
    
    button0.in = user_buttons[5];
    button1.in = user_buttons[4];
    button2.in = user_buttons[3];
    button3.in = user_buttons[2];
    button4.in = user_buttons[1];
    button5.in = user_buttons[0];
    
    eliminateSig = button0.out |
                   button1.out |
                   button2.out |
                   button3.out |
                   button4.out |
                   button5.out;
    
    array_led_controller.colors = {game.array[0][7:4],
                             game.array[1][7:4],
                             game.array[2][7:4],
                             game.array[3][7:4],
                             game.array[4][7:4],
                             game.array[5][7:4]
                             };
    array_led = array_led_controller.led_pulse;
    
    game.eliminate = eliminateSig;
    
    solve_button_cond.in = solve_button;
    start_button_cond.in = start_button;
    
    solve_button_dff.d = solve_button_cond.out;
    start_button_dff.d = start_button_cond.out;
    
    user_solvable[0] = ~problem_solvable.q; // game.solvable[0];
    user_solvable[1] = problem_solvable.q;
    user_solvable[2] = 0;

    
    numbers.values = {game.array[0][3:0],
                      game.array[1][3:0],
                      game.array[2][3:0],
                      game.array[3][3:0],
                      game.array[4][3:0],
                      game.array[5][3:0]
      };
    
    array_seg = numbers.seg;
    array_sel = ~numbers.sel;
    
    shiwei = count_down.q / 10;
    gewei = count_down.q - (count_down.q / 10 * 10);
    
    data_segments.values = {gewei,
                            shiwei,
                            problem.q[0][3:0],
                            problem.q[1][3:0]
      };
    
    data_seg = data_segments.seg;
    data_sel = ~data_segments.sel;
    
    /*
    twitter.in = beep_button; // game.sound;
    twitter.frequency = 2000;
    beep = twitter.wave;
    */
    
    
    eliminatePosition = 0;
    if (button0.out) {
      eliminatePosition = 0;
    }
    if (button1.out) {
      eliminatePosition = 1;
    }
    if (button2.out) {
      eliminatePosition = 2;
    }
    if (button3.out) {
      eliminatePosition = 3;
    }
    if (button4.out) {
      eliminatePosition = 4;
    }
    if (button5.out) {
      eliminatePosition = 5;
    }
    
    game.eliminatePosition = eliminatePosition;
    
    //io_led[2][7:5] = c{game.solvable1, game.solvable2, game.solvable3};
    
    //io_led[0][5:0] = game.leds;   // connect the DIP switches to the LEDs
    
    slow_clk.d = slow_clk.q + 1;
    
    if (eliminateSig) {
      if (count_down.q > 0) {
        count_down.d = count_down.q - 1;
      }
    }
    
    
    case(state.q) {
    
      state.INIT:
        array_led_controller.colors = {4d0, 4d1, 4d2, 4d3, 4d0, 4d1};
        numbers.values = {4hf, 4hf, 4hf, 4hf, 4hf, 4hf};
        data_segments.values = {4hf, 4hf, 4hf, 4hf};
        user_solvable = 0;
        if (eliminateSig) {
          state.d = state.PREPARE;
        }
        
      state.PREPARE:
        array_led_controller.colors = {4d2, 4d2, 4d2, 4d1, 4d1, 4d1};
        numbers.values = {4d0, 4d12, 4d12, 4d11, 4d10, 4hf};
        data_segments.values = {4hf, 4hf, 4hf, 4hf};
        user_solvable = 0;
        game_rst = 1;
        
        if (solve_button_cond.out) {
          state.d = state.START1;
          count_down.d = STEPS;
          start_button_dff.d = 0;
          solve_button_dff.d = 0;
        }
        
      state.START1:
        alu.a = game.array[5][3:0];
        alu.b = problem.q[1][3:0];
        alu.alufn = 6b110010; // CMPEQ
        first_ball_solvable.d = alu.out;
        if ((problem.q[1][4] == 0) | (problem.q[1][3:0] == 0)) {
          first_ball_solvable.d = 1;
        }
        state.d = state.START2;
        
      state.START2:
        alu.a = game.array[4][3:0];
        alu.b = problem.q[0][3:0];
        alu.alufn = 6b110010; // CMPEQ
        second_ball_solvable.d = alu.out;
        if ((problem.q[0][4] == 0) | (problem.q[0][3:0] == 0)) {
          second_ball_solvable.d = 1;
        }
        state.d = state.START3;
        
      state.START3:
        alu.a = first_ball_solvable.q;
        alu.b = second_ball_solvable.q;
        alu.alufn = 6b011000; // AND
        problem_solvable.d = alu.out;
        state.d = state.START4;
        
      state.START4:
        alu.a = solve_button_dff.q;
        alu.b = problem_solvable.q;
        alu.alufn = 6b011000; // AND
        solve_button_dff.d = 0;
        if (alu.out) {
          state.d = state.SOLVE;
        } else {
          state.d = state.CHECK;
        }
        
      state.SOLVE:
        if (problem.q[1][4] == 1) {
          game.solve1 = 1;
        }
        if (problem.q[0][4] == 1) {
          game.solve0 = 1;
        }
        problem.d = problem_set.problem_out;
        count_down.d = STEPS;
        state.d = state.NEXTPROBLEM;
        
      state.NEXTPROBLEM:
        alu.a = problem_counter.q;
        alu.b = 1;
        alu.alufn = 6b000000; // ADD
        problem_counter.d = alu.out;
        state.d = state.CHECK;
        
      state.CHECK:
        if (count_down.q == 0) {
          state.d = state.LOSE;
        } else if (problem_counter.q == 3) {
          state.d = state.WIN;
        } else if (start_button_dff.q) {
          state.d = state.INIT;
        } else {
          state.d = state.START1;
        }
        
      state.LOSE:
        array_led_controller.colors = {4d3, 4d3, 4d3, 4d3, 4d3, 4d3};
        numbers.values = {4hf, 4d11, 4d5, 4d0, 4d12, 4hf};
        data_segments.values = {4hf, 4hf, 4hf, 4hf};
        user_solvable = 0;
        if (eliminateSig) {
          state.d = state.PREPARE;
        }
        
      state.WIN:
        array_led_controller.colors = {4d1, 4d1, 4d1, 4d1, 4d1, 4d1};
        numbers.values = {4hf, 4d11, 4d14, 4d1, 4d13, 4hf};
        data_segments.values = {4hf, 4hf, 4hf, 4hf};
        user_solvable = 0;
        if (eliminateSig) {
          state.d = state.PREPARE;
        }
    }
  }
}